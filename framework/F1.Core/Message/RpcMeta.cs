// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Message/rpc_meta.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rpc {

  /// <summary>Holder for reflection information generated from Message/rpc_meta.proto</summary>
  public static partial class RpcMetaReflection {

    #region Descriptor
    /// <summary>File descriptor for Message/rpc_meta.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcMetaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZNZXNzYWdlL3JwY19tZXRhLnByb3RvEgNScGMi/QEKClJwY1JlcXVlc3QS",
            "FAoMc2VydmljZV9uYW1lGAEgASgJEhMKC21ldGhvZF9uYW1lGAIgASgJEg4K",
            "Bm9uZXdheRgDIAEoCBIQCgh0cmFjZV9pZBgFIAEoCRIPCgdzcGFuX2lkGAYg",
            "ASgJEhYKDnBhcmVudF9zcGFuX2lkGAcgASgJEhAKCGFjdG9yX2lkGAkgASgJ",
            "EhQKDHJlZW50cmFudF9pZBgKIAEoCRIVCg1jb21wcmVzc190eXBlGBQgASgF",
            "EhUKDWVuY29kaW5nX3R5cGUYFSABKAUSEgoKcmVxdWVzdF9pZBgWIAEoEBIP",
            "CgdjYWxsX2lkGBcgASgQIogBCgtScGNSZXNwb25zZRISCgplcnJvcl9jb2Rl",
            "GAEgASgFEhIKCmVycm9yX3RleHQYAiABKAkSFQoNY29tcHJlc3NfdHlwZRgU",
            "IAEoBRIVCg1lbmNvZGluZ190eXBlGBUgASgFEhIKCnJlcXVlc3RfaWQYFiAB",
            "KBASDwoHY2FsbF9pZBgXIAEoECIzChNScGNIZWFydEJlYXRSZXF1ZXN0EhwK",
            "FHJlcXVlc3RfbWlsbGlzZWNvbmRzGAEgASgQIjUKFFJwY0hlYXJ0QmVhdFJl",
            "c3BvbnNlEh0KFXJlc3BvbnNlX21pbGxpc2Vjb25kcxgBIAEoECpECg9ScGND",
            "b21wcmVzc1R5cGUSGAoUUnBjQ29tcHJlc3NUeXBlX05vbmUQABIXChNScGND",
            "b21wcmVzc1R5cGVfTFo0EAEqYwoPUnBjRW5jb2RpbmdUeXBlEhgKFFJwY0Vu",
            "Y29kaW5nVHlwZV9Ob25lEAASGQoVUnBjRW5jb2RpbmdUeXBlX0NlcmFzEAES",
            "GwoXUnBjRW5jb2RpbmdUeXBlX01zZ1BhY2sQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Rpc.RpcCompressType), typeof(global::Rpc.RpcEncodingType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rpc.RpcRequest), global::Rpc.RpcRequest.Parser, new[]{ "ServiceName", "MethodName", "Oneway", "TraceId", "SpanId", "ParentSpanId", "ActorId", "ReentrantId", "CompressType", "EncodingType", "RequestId", "CallId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rpc.RpcResponse), global::Rpc.RpcResponse.Parser, new[]{ "ErrorCode", "ErrorText", "CompressType", "EncodingType", "RequestId", "CallId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rpc.RpcHeartBeatRequest), global::Rpc.RpcHeartBeatRequest.Parser, new[]{ "RequestMilliseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rpc.RpcHeartBeatResponse), global::Rpc.RpcHeartBeatResponse.Parser, new[]{ "ResponseMilliseconds" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RpcCompressType {
    [pbr::OriginalName("RpcCompressType_None")] None = 0,
    [pbr::OriginalName("RpcCompressType_LZ4")] Lz4 = 1,
  }

  public enum RpcEncodingType {
    [pbr::OriginalName("RpcEncodingType_None")] None = 0,
    [pbr::OriginalName("RpcEncodingType_Ceras")] Ceras = 1,
    [pbr::OriginalName("RpcEncodingType_MsgPack")] MsgPack = 2,
  }

  #endregion

  #region Messages
  public sealed partial class RpcRequest : pb::IMessage<RpcRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcRequest> _parser = new pb::MessageParser<RpcRequest>(() => new RpcRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rpc.RpcMetaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcRequest(RpcRequest other) : this() {
      serviceName_ = other.serviceName_;
      methodName_ = other.methodName_;
      oneway_ = other.oneway_;
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      actorId_ = other.actorId_;
      reentrantId_ = other.reentrantId_;
      compressType_ = other.compressType_;
      encodingType_ = other.encodingType_;
      requestId_ = other.requestId_;
      callId_ = other.callId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcRequest Clone() {
      return new RpcRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///服务的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 2;
    private string methodName_ = "";
    /// <summary>
    ///函数名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oneway" field.</summary>
    public const int OnewayFieldNumber = 3;
    private bool oneway_;
    /// <summary>
    ///是否不需要返回值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Oneway {
      get { return oneway_; }
      set {
        oneway_ = value;
      }
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 5;
    private string traceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 6;
    private string spanId_ = "";
    /// <summary>
    ///处理过程中小的请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpanId {
      get { return spanId_; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_span_id" field.</summary>
    public const int ParentSpanIdFieldNumber = 7;
    private string parentSpanId_ = "";
    /// <summary>
    ///当前请求的上层请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 9;
    private string actorId_ = "";
    /// <summary>
    ///ActorRPC的对象唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reentrant_id" field.</summary>
    public const int ReentrantIdFieldNumber = 10;
    private string reentrantId_ = "";
    /// <summary>
    ///可重入ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReentrantId {
      get { return reentrantId_; }
      set {
        reentrantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compress_type" field.</summary>
    public const int CompressTypeFieldNumber = 20;
    private int compressType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompressType {
      get { return compressType_; }
      set {
        compressType_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 21;
    private int encodingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 22;
    private long requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 23;
    private long callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (MethodName != other.MethodName) return false;
      if (Oneway != other.Oneway) return false;
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (ActorId != other.ActorId) return false;
      if (ReentrantId != other.ReentrantId) return false;
      if (CompressType != other.CompressType) return false;
      if (EncodingType != other.EncodingType) return false;
      if (RequestId != other.RequestId) return false;
      if (CallId != other.CallId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (Oneway != false) hash ^= Oneway.GetHashCode();
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
      if (ParentSpanId.Length != 0) hash ^= ParentSpanId.GetHashCode();
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      if (ReentrantId.Length != 0) hash ^= ReentrantId.GetHashCode();
      if (CompressType != 0) hash ^= CompressType.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      if (RequestId != 0L) hash ^= RequestId.GetHashCode();
      if (CallId != 0L) hash ^= CallId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (Oneway != false) {
        output.WriteRawTag(24);
        output.WriteBool(Oneway);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TraceId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ParentSpanId);
      }
      if (ActorId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ActorId);
      }
      if (ReentrantId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ReentrantId);
      }
      if (CompressType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CompressType);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(EncodingType);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(177, 1);
        output.WriteSFixed64(RequestId);
      }
      if (CallId != 0L) {
        output.WriteRawTag(185, 1);
        output.WriteSFixed64(CallId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (Oneway != false) {
        output.WriteRawTag(24);
        output.WriteBool(Oneway);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TraceId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ParentSpanId);
      }
      if (ActorId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ActorId);
      }
      if (ReentrantId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ReentrantId);
      }
      if (CompressType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CompressType);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(EncodingType);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(177, 1);
        output.WriteSFixed64(RequestId);
      }
      if (CallId != 0L) {
        output.WriteRawTag(185, 1);
        output.WriteSFixed64(CallId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (Oneway != false) {
        size += 1 + 1;
      }
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (SpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSpanId);
      }
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      if (ReentrantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReentrantId);
      }
      if (CompressType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompressType);
      }
      if (EncodingType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EncodingType);
      }
      if (RequestId != 0L) {
        size += 2 + 8;
      }
      if (CallId != 0L) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.Oneway != false) {
        Oneway = other.Oneway;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.SpanId.Length != 0) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId.Length != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
      if (other.ReentrantId.Length != 0) {
        ReentrantId = other.ReentrantId;
      }
      if (other.CompressType != 0) {
        CompressType = other.CompressType;
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
      if (other.RequestId != 0L) {
        RequestId = other.RequestId;
      }
      if (other.CallId != 0L) {
        CallId = other.CallId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
          case 24: {
            Oneway = input.ReadBool();
            break;
          }
          case 42: {
            TraceId = input.ReadString();
            break;
          }
          case 50: {
            SpanId = input.ReadString();
            break;
          }
          case 58: {
            ParentSpanId = input.ReadString();
            break;
          }
          case 74: {
            ActorId = input.ReadString();
            break;
          }
          case 82: {
            ReentrantId = input.ReadString();
            break;
          }
          case 160: {
            CompressType = input.ReadInt32();
            break;
          }
          case 168: {
            EncodingType = input.ReadInt32();
            break;
          }
          case 177: {
            RequestId = input.ReadSFixed64();
            break;
          }
          case 185: {
            CallId = input.ReadSFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
          case 24: {
            Oneway = input.ReadBool();
            break;
          }
          case 42: {
            TraceId = input.ReadString();
            break;
          }
          case 50: {
            SpanId = input.ReadString();
            break;
          }
          case 58: {
            ParentSpanId = input.ReadString();
            break;
          }
          case 74: {
            ActorId = input.ReadString();
            break;
          }
          case 82: {
            ReentrantId = input.ReadString();
            break;
          }
          case 160: {
            CompressType = input.ReadInt32();
            break;
          }
          case 168: {
            EncodingType = input.ReadInt32();
            break;
          }
          case 177: {
            RequestId = input.ReadSFixed64();
            break;
          }
          case 185: {
            CallId = input.ReadSFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RpcResponse : pb::IMessage<RpcResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcResponse> _parser = new pb::MessageParser<RpcResponse>(() => new RpcResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rpc.RpcMetaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcResponse(RpcResponse other) : this() {
      errorCode_ = other.errorCode_;
      errorText_ = other.errorText_;
      compressType_ = other.compressType_;
      encodingType_ = other.encodingType_;
      requestId_ = other.requestId_;
      callId_ = other.callId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcResponse Clone() {
      return new RpcResponse(this);
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "error_text" field.</summary>
    public const int ErrorTextFieldNumber = 2;
    private string errorText_ = "";
    /// <summary>
    ///错误描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorText {
      get { return errorText_; }
      set {
        errorText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compress_type" field.</summary>
    public const int CompressTypeFieldNumber = 20;
    private int compressType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompressType {
      get { return compressType_; }
      set {
        compressType_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 21;
    private int encodingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 22;
    private long requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 23;
    private long callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorText != other.ErrorText) return false;
      if (CompressType != other.CompressType) return false;
      if (EncodingType != other.EncodingType) return false;
      if (RequestId != other.RequestId) return false;
      if (CallId != other.CallId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorText.Length != 0) hash ^= ErrorText.GetHashCode();
      if (CompressType != 0) hash ^= CompressType.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      if (RequestId != 0L) hash ^= RequestId.GetHashCode();
      if (CallId != 0L) hash ^= CallId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorText);
      }
      if (CompressType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CompressType);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(EncodingType);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(177, 1);
        output.WriteSFixed64(RequestId);
      }
      if (CallId != 0L) {
        output.WriteRawTag(185, 1);
        output.WriteSFixed64(CallId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorText);
      }
      if (CompressType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CompressType);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(EncodingType);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(177, 1);
        output.WriteSFixed64(RequestId);
      }
      if (CallId != 0L) {
        output.WriteRawTag(185, 1);
        output.WriteSFixed64(CallId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorText);
      }
      if (CompressType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompressType);
      }
      if (EncodingType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EncodingType);
      }
      if (RequestId != 0L) {
        size += 2 + 8;
      }
      if (CallId != 0L) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcResponse other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorText.Length != 0) {
        ErrorText = other.ErrorText;
      }
      if (other.CompressType != 0) {
        CompressType = other.CompressType;
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
      if (other.RequestId != 0L) {
        RequestId = other.RequestId;
      }
      if (other.CallId != 0L) {
        CallId = other.CallId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorText = input.ReadString();
            break;
          }
          case 160: {
            CompressType = input.ReadInt32();
            break;
          }
          case 168: {
            EncodingType = input.ReadInt32();
            break;
          }
          case 177: {
            RequestId = input.ReadSFixed64();
            break;
          }
          case 185: {
            CallId = input.ReadSFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorText = input.ReadString();
            break;
          }
          case 160: {
            CompressType = input.ReadInt32();
            break;
          }
          case 168: {
            EncodingType = input.ReadInt32();
            break;
          }
          case 177: {
            RequestId = input.ReadSFixed64();
            break;
          }
          case 185: {
            CallId = input.ReadSFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RpcHeartBeatRequest : pb::IMessage<RpcHeartBeatRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcHeartBeatRequest> _parser = new pb::MessageParser<RpcHeartBeatRequest>(() => new RpcHeartBeatRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcHeartBeatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rpc.RpcMetaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcHeartBeatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcHeartBeatRequest(RpcHeartBeatRequest other) : this() {
      requestMilliseconds_ = other.requestMilliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcHeartBeatRequest Clone() {
      return new RpcHeartBeatRequest(this);
    }

    /// <summary>Field number for the "request_milliseconds" field.</summary>
    public const int RequestMillisecondsFieldNumber = 1;
    private long requestMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestMilliseconds {
      get { return requestMilliseconds_; }
      set {
        requestMilliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcHeartBeatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcHeartBeatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestMilliseconds != other.RequestMilliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestMilliseconds != 0L) hash ^= RequestMilliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestMilliseconds != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(RequestMilliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestMilliseconds != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(RequestMilliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestMilliseconds != 0L) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcHeartBeatRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestMilliseconds != 0L) {
        RequestMilliseconds = other.RequestMilliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            RequestMilliseconds = input.ReadSFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            RequestMilliseconds = input.ReadSFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RpcHeartBeatResponse : pb::IMessage<RpcHeartBeatResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcHeartBeatResponse> _parser = new pb::MessageParser<RpcHeartBeatResponse>(() => new RpcHeartBeatResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcHeartBeatResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rpc.RpcMetaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcHeartBeatResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcHeartBeatResponse(RpcHeartBeatResponse other) : this() {
      responseMilliseconds_ = other.responseMilliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcHeartBeatResponse Clone() {
      return new RpcHeartBeatResponse(this);
    }

    /// <summary>Field number for the "response_milliseconds" field.</summary>
    public const int ResponseMillisecondsFieldNumber = 1;
    private long responseMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResponseMilliseconds {
      get { return responseMilliseconds_; }
      set {
        responseMilliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcHeartBeatResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcHeartBeatResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseMilliseconds != other.ResponseMilliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResponseMilliseconds != 0L) hash ^= ResponseMilliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResponseMilliseconds != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(ResponseMilliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResponseMilliseconds != 0L) {
        output.WriteRawTag(9);
        output.WriteSFixed64(ResponseMilliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResponseMilliseconds != 0L) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcHeartBeatResponse other) {
      if (other == null) {
        return;
      }
      if (other.ResponseMilliseconds != 0L) {
        ResponseMilliseconds = other.ResponseMilliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ResponseMilliseconds = input.ReadSFixed64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            ResponseMilliseconds = input.ReadSFixed64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
