// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Message/rpc_meta.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rpc {

  /// <summary>Holder for reflection information generated from Message/rpc_meta.proto</summary>
  public static partial class RpcMetaReflection {

    #region Descriptor
    /// <summary>File descriptor for Message/rpc_meta.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcMetaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZNZXNzYWdlL3JwY19tZXRhLnByb3RvEgNScGMirAEKB1JwY01ldGESJAoH",
            "cmVxdWVzdBgBIAEoCzITLlJwYy5ScGNSZXF1ZXN0TWV0YRImCghyZXNwb25z",
            "ZRgCIAEoCzIULlJwYy5ScGNSZXNwb25zZU1ldGESFQoNY29tcHJlc3NfdHlw",
            "ZRgDIAEoBRIVCg1lbmNvZGluZ190eXBlGAQgASgFEhIKCnJlcXVlc3RfaWQY",
            "BSABKBASEQoJa2VlcGFsaXZlGAYgASgIIq4BCg5ScGNSZXF1ZXN0TWV0YRIU",
            "CgxzZXJ2aWNlX25hbWUYASABKAkSEwoLbWV0aG9kX25hbWUYAiABKAkSEAoI",
            "dHJhY2VfaWQYBCABKBASFAoMdHJhY2Vfc2VydmVyGAUgASgQEg8KB3NwYW5f",
            "aWQYBiABKBASFgoOcGFyZW50X3NwYW5faWQYByABKBASDgoGb25ld2F5GAgg",
            "ASgIEhAKCGFjdG9yX2lkGAkgASgJIjkKD1JwY1Jlc3BvbnNlTWV0YRISCgpl",
            "cnJvcl9jb2RlGAEgASgFEhIKCmVycm9yX3RleHQYAiABKAkqRAoPUnBjQ29t",
            "cHJlc3NUeXBlEhgKFFJwY0NvbXByZXNzVHlwZV9Ob25lEAASFwoTUnBjQ29t",
            "cHJlc3NUeXBlX0xaNBABKmMKD1JwY0VuY29kaW5nVHlwZRIYChRScGNFbmNv",
            "ZGluZ1R5cGVfTm9uZRAAEhkKFVJwY0VuY29kaW5nVHlwZV9DZXJhcxABEhsK",
            "F1JwY0VuY29kaW5nVHlwZV9Nc2dQYWNrEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Rpc.RpcCompressType), typeof(global::Rpc.RpcEncodingType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rpc.RpcMeta), global::Rpc.RpcMeta.Parser, new[]{ "Request", "Response", "CompressType", "EncodingType", "RequestId", "Keepalive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rpc.RpcRequestMeta), global::Rpc.RpcRequestMeta.Parser, new[]{ "ServiceName", "MethodName", "TraceId", "TraceServer", "SpanId", "ParentSpanId", "Oneway", "ActorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rpc.RpcResponseMeta), global::Rpc.RpcResponseMeta.Parser, new[]{ "ErrorCode", "ErrorText" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RpcCompressType {
    [pbr::OriginalName("RpcCompressType_None")] None = 0,
    [pbr::OriginalName("RpcCompressType_LZ4")] Lz4 = 1,
  }

  public enum RpcEncodingType {
    [pbr::OriginalName("RpcEncodingType_None")] None = 0,
    [pbr::OriginalName("RpcEncodingType_Ceras")] Ceras = 1,
    [pbr::OriginalName("RpcEncodingType_MsgPack")] MsgPack = 2,
  }

  #endregion

  #region Messages
  public sealed partial class RpcMeta : pb::IMessage<RpcMeta>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcMeta> _parser = new pb::MessageParser<RpcMeta>(() => new RpcMeta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rpc.RpcMetaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcMeta(RpcMeta other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      compressType_ = other.compressType_;
      encodingType_ = other.encodingType_;
      requestId_ = other.requestId_;
      keepalive_ = other.keepalive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcMeta Clone() {
      return new RpcMeta(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Rpc.RpcRequestMeta request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rpc.RpcRequestMeta Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::Rpc.RpcResponseMeta response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rpc.RpcResponseMeta Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    /// <summary>Field number for the "compress_type" field.</summary>
    public const int CompressTypeFieldNumber = 3;
    private int compressType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompressType {
      get { return compressType_; }
      set {
        compressType_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 4;
    private int encodingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 5;
    private long requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "keepalive" field.</summary>
    public const int KeepaliveFieldNumber = 6;
    private bool keepalive_;
    /// <summary>
    ///true为心跳, 没有args
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Keepalive {
      get { return keepalive_; }
      set {
        keepalive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (CompressType != other.CompressType) return false;
      if (EncodingType != other.EncodingType) return false;
      if (RequestId != other.RequestId) return false;
      if (Keepalive != other.Keepalive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (CompressType != 0) hash ^= CompressType.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      if (RequestId != 0L) hash ^= RequestId.GetHashCode();
      if (Keepalive != false) hash ^= Keepalive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (CompressType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CompressType);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EncodingType);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(41);
        output.WriteSFixed64(RequestId);
      }
      if (Keepalive != false) {
        output.WriteRawTag(48);
        output.WriteBool(Keepalive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (CompressType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CompressType);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EncodingType);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(41);
        output.WriteSFixed64(RequestId);
      }
      if (Keepalive != false) {
        output.WriteRawTag(48);
        output.WriteBool(Keepalive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (CompressType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompressType);
      }
      if (EncodingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncodingType);
      }
      if (RequestId != 0L) {
        size += 1 + 8;
      }
      if (Keepalive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcMeta other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Rpc.RpcRequestMeta();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::Rpc.RpcResponseMeta();
        }
        Response.MergeFrom(other.Response);
      }
      if (other.CompressType != 0) {
        CompressType = other.CompressType;
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
      if (other.RequestId != 0L) {
        RequestId = other.RequestId;
      }
      if (other.Keepalive != false) {
        Keepalive = other.Keepalive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Rpc.RpcRequestMeta();
            }
            input.ReadMessage(Request);
            break;
          }
          case 18: {
            if (response_ == null) {
              Response = new global::Rpc.RpcResponseMeta();
            }
            input.ReadMessage(Response);
            break;
          }
          case 24: {
            CompressType = input.ReadInt32();
            break;
          }
          case 32: {
            EncodingType = input.ReadInt32();
            break;
          }
          case 41: {
            RequestId = input.ReadSFixed64();
            break;
          }
          case 48: {
            Keepalive = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Rpc.RpcRequestMeta();
            }
            input.ReadMessage(Request);
            break;
          }
          case 18: {
            if (response_ == null) {
              Response = new global::Rpc.RpcResponseMeta();
            }
            input.ReadMessage(Response);
            break;
          }
          case 24: {
            CompressType = input.ReadInt32();
            break;
          }
          case 32: {
            EncodingType = input.ReadInt32();
            break;
          }
          case 41: {
            RequestId = input.ReadSFixed64();
            break;
          }
          case 48: {
            Keepalive = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RpcRequestMeta : pb::IMessage<RpcRequestMeta>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcRequestMeta> _parser = new pb::MessageParser<RpcRequestMeta>(() => new RpcRequestMeta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcRequestMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rpc.RpcMetaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcRequestMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcRequestMeta(RpcRequestMeta other) : this() {
      serviceName_ = other.serviceName_;
      methodName_ = other.methodName_;
      traceId_ = other.traceId_;
      traceServer_ = other.traceServer_;
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      oneway_ = other.oneway_;
      actorId_ = other.actorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcRequestMeta Clone() {
      return new RpcRequestMeta(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///服务的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 2;
    private string methodName_ = "";
    /// <summary>
    ///函数名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 4;
    private long traceId_;
    /// <summary>
    ///标识同一个大的请求, 例如玩家发起的请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TraceId {
      get { return traceId_; }
      set {
        traceId_ = value;
      }
    }

    /// <summary>Field number for the "trace_server" field.</summary>
    public const int TraceServerFieldNumber = 5;
    private long traceServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TraceServer {
      get { return traceServer_; }
      set {
        traceServer_ = value;
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 6;
    private long spanId_;
    /// <summary>
    ///处理过程中小的请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpanId {
      get { return spanId_; }
      set {
        spanId_ = value;
      }
    }

    /// <summary>Field number for the "parent_span_id" field.</summary>
    public const int ParentSpanIdFieldNumber = 7;
    private long parentSpanId_;
    /// <summary>
    ///当前请求的上层请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "oneway" field.</summary>
    public const int OnewayFieldNumber = 8;
    private bool oneway_;
    /// <summary>
    ///是否不需要返回值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Oneway {
      get { return oneway_; }
      set {
        oneway_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 9;
    private string actorId_ = "";
    /// <summary>
    ///ActorRPC的对象唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorId {
      get { return actorId_; }
      set {
        actorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcRequestMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcRequestMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (MethodName != other.MethodName) return false;
      if (TraceId != other.TraceId) return false;
      if (TraceServer != other.TraceServer) return false;
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (Oneway != other.Oneway) return false;
      if (ActorId != other.ActorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (TraceId != 0L) hash ^= TraceId.GetHashCode();
      if (TraceServer != 0L) hash ^= TraceServer.GetHashCode();
      if (SpanId != 0L) hash ^= SpanId.GetHashCode();
      if (ParentSpanId != 0L) hash ^= ParentSpanId.GetHashCode();
      if (Oneway != false) hash ^= Oneway.GetHashCode();
      if (ActorId.Length != 0) hash ^= ActorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (TraceId != 0L) {
        output.WriteRawTag(33);
        output.WriteSFixed64(TraceId);
      }
      if (TraceServer != 0L) {
        output.WriteRawTag(41);
        output.WriteSFixed64(TraceServer);
      }
      if (SpanId != 0L) {
        output.WriteRawTag(49);
        output.WriteSFixed64(SpanId);
      }
      if (ParentSpanId != 0L) {
        output.WriteRawTag(57);
        output.WriteSFixed64(ParentSpanId);
      }
      if (Oneway != false) {
        output.WriteRawTag(64);
        output.WriteBool(Oneway);
      }
      if (ActorId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ActorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (TraceId != 0L) {
        output.WriteRawTag(33);
        output.WriteSFixed64(TraceId);
      }
      if (TraceServer != 0L) {
        output.WriteRawTag(41);
        output.WriteSFixed64(TraceServer);
      }
      if (SpanId != 0L) {
        output.WriteRawTag(49);
        output.WriteSFixed64(SpanId);
      }
      if (ParentSpanId != 0L) {
        output.WriteRawTag(57);
        output.WriteSFixed64(ParentSpanId);
      }
      if (Oneway != false) {
        output.WriteRawTag(64);
        output.WriteBool(Oneway);
      }
      if (ActorId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ActorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (TraceId != 0L) {
        size += 1 + 8;
      }
      if (TraceServer != 0L) {
        size += 1 + 8;
      }
      if (SpanId != 0L) {
        size += 1 + 8;
      }
      if (ParentSpanId != 0L) {
        size += 1 + 8;
      }
      if (Oneway != false) {
        size += 1 + 1;
      }
      if (ActorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcRequestMeta other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.TraceId != 0L) {
        TraceId = other.TraceId;
      }
      if (other.TraceServer != 0L) {
        TraceServer = other.TraceServer;
      }
      if (other.SpanId != 0L) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId != 0L) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.Oneway != false) {
        Oneway = other.Oneway;
      }
      if (other.ActorId.Length != 0) {
        ActorId = other.ActorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
          case 33: {
            TraceId = input.ReadSFixed64();
            break;
          }
          case 41: {
            TraceServer = input.ReadSFixed64();
            break;
          }
          case 49: {
            SpanId = input.ReadSFixed64();
            break;
          }
          case 57: {
            ParentSpanId = input.ReadSFixed64();
            break;
          }
          case 64: {
            Oneway = input.ReadBool();
            break;
          }
          case 74: {
            ActorId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
          case 33: {
            TraceId = input.ReadSFixed64();
            break;
          }
          case 41: {
            TraceServer = input.ReadSFixed64();
            break;
          }
          case 49: {
            SpanId = input.ReadSFixed64();
            break;
          }
          case 57: {
            ParentSpanId = input.ReadSFixed64();
            break;
          }
          case 64: {
            Oneway = input.ReadBool();
            break;
          }
          case 74: {
            ActorId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RpcResponseMeta : pb::IMessage<RpcResponseMeta>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcResponseMeta> _parser = new pb::MessageParser<RpcResponseMeta>(() => new RpcResponseMeta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcResponseMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rpc.RpcMetaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcResponseMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcResponseMeta(RpcResponseMeta other) : this() {
      errorCode_ = other.errorCode_;
      errorText_ = other.errorText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcResponseMeta Clone() {
      return new RpcResponseMeta(this);
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "error_text" field.</summary>
    public const int ErrorTextFieldNumber = 2;
    private string errorText_ = "";
    /// <summary>
    ///错误描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorText {
      get { return errorText_; }
      set {
        errorText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcResponseMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcResponseMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorText != other.ErrorText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorText.Length != 0) hash ^= ErrorText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (ErrorText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (ErrorText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcResponseMeta other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorText.Length != 0) {
        ErrorText = other.ErrorText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorText = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            ErrorText = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
